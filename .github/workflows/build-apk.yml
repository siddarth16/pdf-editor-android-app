name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        accept-android-sdk-licenses: true
        log-accepted-android-sdk-licenses: true
        
    - name: Accept Android SDK licenses manually
      run: yes | sdkmanager --licenses
      
    - name: Setup Python for image generation
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install Python dependencies
      run: pip install pillow
      
    - name: Generate placeholder images
      run: |
        python3 -c "
        from PIL import Image, ImageDraw, ImageFont
        import os
        
        def create_placeholder_image(size, filename, text='PDF', bg_color=(16, 16, 16), text_color=(255, 255, 255)):
            img = Image.new('RGBA', size, bg_color + (255,))
            draw = ImageDraw.Draw(img)
            
            try:
                font = ImageFont.load_default()
            except:
                font = None
            
            if font:
                bbox = draw.textbbox((0, 0), text, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
            else:
                text_width = len(text) * 8
                text_height = 12
            
            x = (size[0] - text_width) // 2
            y = (size[1] - text_height) // 2
            
            draw.text((x, y), text, fill=text_color, font=font)
            img.save(filename, 'PNG')
            print(f'Created {filename} ({size[0]}x{size[1]})')
        
        # Ensure assets directory exists
        os.makedirs('assets', exist_ok=True)
        
        # Create all required images
        create_placeholder_image((1024, 1024), 'assets/icon.png', 'PDF')
        create_placeholder_image((1024, 1024), 'assets/adaptive-icon.png', 'PDF')
        create_placeholder_image((1284, 2778), 'assets/splash.png', 'PDF Editor Pro')
        create_placeholder_image((32, 32), 'assets/favicon.png', 'P')
        "
        
    - name: Verify generated images
      run: |
        echo "Checking generated images..."
        ls -la assets/
        file assets/*.png
        du -sh assets/*
        
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Setup EAS CLI
      run: npm install -g eas-cli
      
    - name: Add npm global bin to PATH
      run: echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
      
    - name: Configure EAS project
      run: |
        npx eas-cli init --non-interactive --force
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        
    - name: Clean existing Android build files
      run: |
        rm -rf android/
        echo "Cleaned existing Android build files for fresh configuration"
      
    - name: Prebuild with Expo
      run: |
        npx expo prebuild --platform android
        
    - name: Setup Gradle permissions
      run: chmod +x ./android/gradlew
      
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon
        
    - name: Find and rename APK
      run: |
        find . -name "*.apk" -type f
        APK_PATH=$(find ./android -name "*.apk" -type f | head -1)
        if [ -n "$APK_PATH" ]; then
          cp "$APK_PATH" ./pdf-editor-pro.apk
          echo "APK found and copied to pdf-editor-pro.apk"
          ls -la *.apk
        else
          echo "No APK found"
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: pdf-editor-pro-apk
        path: '*.apk'
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: '*.apk'
        tag_name: 'v${{ github.run_number }}'
        name: 'PDF Editor Pro v${{ github.run_number }}'
        body: |
          🚀 **PDF Editor Pro - Android APK Build**
          
          **Build Information:**
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          
          **Features:**
          - Advanced PDF editing capabilities
          - Modern glass-morphism UI
          - Dark theme optimized
          - Gesture-based navigation
          
          **Installation:**
          Download the APK file and install on your Android device.
          
          *Built with ❤️ using GitHub Actions*
          
    # Add comprehensive failure logging
    - name: Collect build failure logs
      if: failure()
      run: |
        echo "==================== BUILD FAILURE LOG ====================" > build-failure-log.txt
        echo "Build failed at: $(date)" >> build-failure-log.txt
        echo "GitHub Run ID: ${{ github.run_id }}" >> build-failure-log.txt
        echo "GitHub Run Number: ${{ github.run_number }}" >> build-failure-log.txt
        echo "Commit SHA: ${{ github.sha }}" >> build-failure-log.txt
        echo "Branch: ${{ github.ref }}" >> build-failure-log.txt
        echo "Event: ${{ github.event_name }}" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== SYSTEM INFORMATION ====================" >> build-failure-log.txt
        echo "Runner OS: $(uname -a)" >> build-failure-log.txt
        echo "Node Version: $(node --version)" >> build-failure-log.txt
        echo "NPM Version: $(npm --version)" >> build-failure-log.txt
        echo "Java Version: $(java -version 2>&1)" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== PACKAGE.JSON CONTENT ====================" >> build-failure-log.txt
        cat package.json >> build-failure-log.txt 2>/dev/null || echo "package.json not found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== ANDROID SDK INFORMATION ====================" >> build-failure-log.txt
        echo "ANDROID_HOME: $ANDROID_HOME" >> build-failure-log.txt
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT" >> build-failure-log.txt
        ls -la $ANDROID_HOME 2>/dev/null || echo "Android SDK directory not found" >> build-failure-log.txt
        echo "SDK Manager licenses:" >> build-failure-log.txt
        ls -la $ANDROID_HOME/licenses 2>/dev/null || echo "No licenses directory found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== EXPO PROJECT INFORMATION ====================" >> build-failure-log.txt
        echo "App.json content:" >> build-failure-log.txt
        cat app.json >> build-failure-log.txt 2>/dev/null || echo "app.json not found" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        echo "Expo CLI version:" >> build-failure-log.txt
        npx expo --version >> build-failure-log.txt 2>/dev/null || echo "Expo CLI not found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== ANDROID PROJECT STRUCTURE ====================" >> build-failure-log.txt
        echo "Android directory contents:" >> build-failure-log.txt
        ls -la android/ >> build-failure-log.txt 2>/dev/null || echo "Android directory not found" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        echo "Android app directory:" >> build-failure-log.txt
        ls -la android/app/ >> build-failure-log.txt 2>/dev/null || echo "Android app directory not found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== GRADLE INFORMATION ====================" >> build-failure-log.txt
        echo "Gradle wrapper properties:" >> build-failure-log.txt
        cat android/gradle/wrapper/gradle-wrapper.properties >> build-failure-log.txt 2>/dev/null || echo "Gradle wrapper properties not found" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        echo "Build.gradle content:" >> build-failure-log.txt
        cat android/build.gradle >> build-failure-log.txt 2>/dev/null || echo "Build.gradle not found" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        echo "App build.gradle content:" >> build-failure-log.txt
        cat android/app/build.gradle >> build-failure-log.txt 2>/dev/null || echo "App build.gradle not found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== RECENT GRADLE LOGS ====================" >> build-failure-log.txt
        echo "Gradle daemon logs:" >> build-failure-log.txt
        find ~/.gradle/daemon -name "*.log" -type f -exec tail -100 {} \; >> build-failure-log.txt 2>/dev/null || echo "No Gradle daemon logs found" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== ENVIRONMENT VARIABLES ====================" >> build-failure-log.txt
        echo "PATH: $PATH" >> build-failure-log.txt
        echo "NODE_PATH: $NODE_PATH" >> build-failure-log.txt
        echo "JAVA_HOME: $JAVA_HOME" >> build-failure-log.txt
        echo "EXPO_TOKEN: [REDACTED]" >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== DISK SPACE ====================" >> build-failure-log.txt
        df -h >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "==================== PROCESS LIST ====================" >> build-failure-log.txt
        ps aux | head -20 >> build-failure-log.txt
        echo "============================================================" >> build-failure-log.txt
        echo "" >> build-failure-log.txt
        
        echo "Log file created successfully!"
        echo "Log file size: $(wc -l < build-failure-log.txt) lines"
        
    - name: Upload failure logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-logs-${{ github.run_number }}
        path: build-failure-log.txt
        retention-days: 30
        
    - name: Comment on PR with failure details
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let logContent = '';
          try {
            logContent = fs.readFileSync('build-failure-log.txt', 'utf8');
          } catch (error) {
            logContent = 'Could not read failure log file.';
          }
          
          const comment = `## 🚨 Build Failed
          
          **Run ID:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          
          **Failure Logs:**
          \`\`\`
          ${logContent.substring(0, 2000)}
          \`\`\`
          
          [View full logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });